---
globs: *.php
description: Reglas generales para desarrollo de WordPress y WooCommerce
---

# WordPress & WooCommerce Development Rules

## Estándares de WordPress

### Estructura de Archivos PHP
- Siempre usar `<?php` al inicio de archivos PHP
- Incluir `if ( ! defined( 'ABSPATH' ) ) { exit; }` para seguridad
- Usar indentación de 4 espacios (no tabs)
- Líneas máximo 120 caracteres

### Nomenclatura
- **Funciones**: `snake_case` con prefijo único del plugin
- **Clases**: `PascalCase` con prefijo único
- **Constantes**: `UPPER_CASE` con prefijo único
- **Variables**: `snake_case` descriptivo

### Hooks y Filtros
```php
// Actions
add_action( 'hook_name', 'callback_function', priority, accepted_args );

// Filters
add_filter( 'filter_name', 'callback_function', priority, accepted_args );

// Remover hooks
remove_action( 'hook_name', 'callback_function', priority );
remove_filter( 'filter_name', 'callback_function', priority );
```

## WooCommerce Específico

### Productos
```php
// Obtener producto
$product = wc_get_product( $product_id );

// Crear producto
$product = new WC_Product_Simple();
$product->set_name( 'Nombre del producto' );
$product->set_price( 100 );
$product->save();
```

### Carrito y Checkout
```php
// Agregar al carrito
WC()->cart->add_to_cart( $product_id, $quantity );

// Obtener carrito
$cart_items = WC()->cart->get_cart();

// Calcular totales
WC()->cart->calculate_totals();
```

### Órdenes
```php
// Crear orden
$order = wc_create_order();

// Agregar producto a orden
$order->add_product( $product, $quantity );

// Calcular totales
$order->calculate_totals();
$order->save();
```

### Métodos de Pago
```php
// Registrar gateway
add_filter( 'woocommerce_payment_gateways', 'add_custom_gateway' );

function add_custom_gateway( $gateways ) {
    $gateways[] = 'WC_Custom_Gateway';
    return $gateways;
}
```

### Métodos de Envío
```php
// Registrar método de envío
add_action( 'woocommerce_shipping_init', 'custom_shipping_method_init' );

function custom_shipping_method_init() {
    if ( ! class_exists( 'WC_Custom_Shipping_Method' ) ) {
        class WC_Custom_Shipping_Method extends WC_Shipping_Method {
            // Implementación
        }
    }
}
```

## Base de Datos

### Consultas Seguras
```php
// Usar $wpdb para consultas personalizadas
global $wpdb;

$results = $wpdb->get_results(
    $wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}table WHERE column = %s",
        $value
    )
);
```

### Meta Data
```php
// Product meta
$product->get_meta( 'custom_field' );
$product->update_meta_data( 'custom_field', $value );

// Order meta
$order->get_meta( 'custom_field' );
$order->update_meta_data( 'custom_field', $value );
```

## Seguridad

### Validación y Sanitización
```php
// Validar datos
$email = is_email( $email ) ? $email : false;
$url = esc_url_raw( $url );
$text = sanitize_text_field( $text );

// Nonces
wp_nonce_field( 'action_name', 'nonce_name' );
wp_verify_nonce( $_POST['nonce_name'], 'action_name' );
```

### Permisos
```php
// Verificar permisos
if ( ! current_user_can( 'manage_woocommerce' ) ) {
    wp_die( 'No tienes permisos suficientes' );
}
```

### Escape de Output
```php
// HTML
echo esc_html( $text );

// Atributos
echo esc_attr( $attribute );

// URLs
echo esc_url( $url );

// JavaScript
echo esc_js( $javascript );
```

## Performance

### Transients
```php
// Guardar datos temporales
set_transient( 'cache_key', $data, HOUR_IN_SECONDS );

// Obtener datos temporales
$data = get_transient( 'cache_key' );

// Eliminar transients
delete_transient( 'cache_key' );
```

### Cache
```php
// Usar wp_cache
wp_cache_set( 'key', $data, 'group', 3600 );
$data = wp_cache_get( 'key', 'group' );
```

### Consultas Optimizadas
```php
// Usar WP_Query con parámetros específicos
$query = new WP_Query( array(
    'post_type' => 'product',
    'posts_per_page' => 10,
    'meta_query' => array(
        array(
            'key' => 'custom_field',
            'value' => $value,
            'compare' => '='
        )
    )
) );
```

## Internacionalización

### Text Domain
```php
// Definir text domain
load_plugin_textdomain( 'plugin-textdomain', false, dirname( plugin_basename( __FILE__ ) ) . '/languages' );

// Usar funciones de traducción
__( 'Texto', 'plugin-textdomain' );
_e( 'Texto', 'plugin-textdomain' );
_x( 'Texto', 'contexto', 'plugin-textdomain' );
_n( 'Singular', 'Plural', $count, 'plugin-textdomain' );
```

## AJAX

### Admin AJAX
```php
// Registrar AJAX
add_action( 'wp_ajax_action_name', 'callback_function' );
add_action( 'wp_ajax_nopriv_action_name', 'callback_function' );

// En JavaScript
jQuery.post( ajaxurl, {
    action: 'action_name',
    data: data
}, function( response ) {
    // Manejar respuesta
});
```

## Formularios

### Formularios Seguros
```php
// Formulario HTML
<form method="post">
    <?php wp_nonce_field( 'form_action', 'form_nonce' ); ?>
    <input type="text" name="field_name" value="<?php echo esc_attr( $value ); ?>" />
    <input type="submit" value="Enviar" />
</form>

// Procesar formulario
if ( isset( $_POST['form_nonce'] ) && wp_verify_nonce( $_POST['form_nonce'], 'form_action' ) ) {
    $field_value = sanitize_text_field( $_POST['field_name'] );
    // Procesar datos
}
```

## Logging y Debugging

### Debug
```php
// Usar WP_DEBUG
if ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {
    error_log( 'Debug message: ' . print_r( $data, true ) );
}

// Usar WooCommerce logger
$logger = wc_get_logger();
$logger->info( 'Log message', array( 'source' => 'plugin-name' ) );
```

## Testing

### Unit Testing
- Usar PHPUnit para tests unitarios
- Mockear dependencias externas
- Testear casos edge y errores

### Integration Testing
- Testear integración con WooCommerce
- Verificar hooks y filtros
- Testear con diferentes configuraciones